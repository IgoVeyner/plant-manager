exit
all_plants
all_plannts
exit
plant[:water_info.text]
plant[:water_info]
plantplant[:water_info]
p
exit
plants
exit
exi
plants
exit
water_info.text
water_info
@water
exit
@water
exit
@light
parsed_page
urls
exit
fertilizer_info.text
exit
                    end
                        byebug           
                            water_info = p 
                        if p.css("span b").text.include?("Water:")
plant_information.each do |p|
light_info.text
exit
light_info.text
water_info.text
water_info
light_info
exit
light_info
exit
water_info.text
exit
water_info
exit
plant_information
opened_url
plant_information
water_info
exit
water_info
exit
plant_information
exit
water_info
exit
water_info
exit
water_info
exit
water_info
exit
                    end
                        p.include?("Water")
                        water_info = p if 
 plant_information.each do |p|
water_info
exit
water_info
exit
plant_information
exit
opened_url.css("p").text
opened_url.css("p").test
opened_url.css("p")
exit
opened_url.css("h1").text
opened_url
Nokogiri::HTML(open(https://www.apartmenttherapy.com/features/houseplant-guide-encyclopedia))
exit
opened_url.css("h1").text
opened_url.css("h1")
opened_url
exit
opened_url
urls
opened_url.css("h1")
exit
opened_url.css("h1")
opened_url
exit
parsed_page.css("a").collect {|all| all.attribute("href").value}
parsed_page.css("a")
parsed_page
parsed_page.css
exit
all_plants
name = parsed_page.css("a").collect {|all| all.attribute("href").value }
exit
parsed_page.css("a").collect {|all| all.attribute("href").value }
parsed_page.css("a").text.map {|a| a.attribute('href').value}
parsed_page.css("a").text[1001]
parsed_page.css("a").text[1]
parsed_page.css("a").map {|all| all.text}
parsed_page.css("a").map {|all| all.text
parsed_page.css("a").first.text
exit
name =  parsed_page.css("a").first
parsed_page.css("div.liner").css("b").text.first.attr("href")
exit
parsed_page.css("div.liner").css("b").text
parsed_page.css("div.liner").css("b")text
parsed_page.css("span").text
parsed_page.css("p").text
parsed_page.css("b").text
exit
parsed_page.css("a").text.first
parsed_page.css("a").text
exit
name =  parsed_page.css("a").text.map {|a| a.attribute('src').value}
parsed_page.css("div.liner").collect { |a| a.tname =  parsed_page.css("a").text.map {|a| a.attribute('src').value}text }
parsed_page.css("div.liner").collect { |a| a.tname =  parsed_page.css("a").text.map {|a| a.attribute('src').value}ext }
parsed_page.css("div.liner").collect { |a| a.text }
name =  parsed_page.css("a").text.map {|a| a.attribute('href').value}
name =  parsed_page.css("a").text.collect {|a| a.attribute('href').value}
name =  parsed_page.css("a").text.each {|a| a.attribute('href').value}
name = parsed_page.css("a").text.map
name = parsed_page.css("a").map
name = parsed_page.css("a").text
name.count
name = parsed_page.css("a").text
name = parsed_page.css("h2").text
exit
name = parsed_page.css("h2").text
name = parsed_page.css("h2.calloutbox").text
PlantManager::Scraper.scraper
exit
scraper
exit
parsed_page
plant_names
plant_names.count
exit
