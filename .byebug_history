exit
;
exit
;
exit
PlantManager::Plant.all_plants
exit
 @@all
self.all
exit
"1." + #{urls}
urls
exit
PlantManager::Plant.all
exit
PlantManager::Plant.all
exit
PlantManager::Plant.name
PlantManager::Plant.all
exit
water
exit
paragraph.text
water
exit
paragraph
name
fertilizer
light
water
exit
plant_information.css("span b").text.include?("Water:")
exit
name
naem
opened_url.css("p") 
exit
xit
parsed_page.css(".Liner")[1].css("a")[0]
PlantManager::Plant.all
self.all
self.@@all
sel.@@all
opened_url.css("p") 
name
exit
name
exit
opened_url
exit
opened_url.css("p") 
opened_url
plant_information
exit
parsed_page.css(".Liner")[1].css("a").collect {|all| all.attribute("href").value unless all.attribute("href").value == "#top" || all.attribute("href").value == nil } 
parsed_page.css(".Liner")[1].css("a").collect {|all| all.attribute("href").value unless all.attribute("href").value == "#top" }
urls
parsed_page.css(".Liner")[1].css("a").collect {|all| all.attribute("href").value} 
urls
parsed_page.css(".Liner")[1]
parsed_page.css(".Liner")[1].css
parsed_page.css(".Liner")[0][0]
parsed_page.css(".Liner")[00]
urls = parsed_page.css(".Liner")[0].css("a")[1]
urls = parsed_page.css(".Liner")[0].css("a")
urls
urls = parsed_page.css(".Liner")[0].css("a").collect {|all| all.attribute("href").value} 
urls = parsed_page.css(".Liner")[0].collect {|all| all.attribute("href").value} 
urls
urls = parsed_page.css(".Liner")[0]
parsed_page.css
parsed_page
urls
exit
urls
exit
urls
exit
opened_url
name
urls
plant_information
;
exit
plant_information
;;;
PlantManager::Plant.all
self.all
plants.all
name
;
exit
self.all_plants
select_plant
name
name'
;
name = PlantManager::Plant.new(name, water, light, fertilizer)
name
;
ext
select_plant
self.all_plants
PlantManager::Plant.all
PlantManager::Plant.all_plants
      end
        puts "#{index+1}. #{plant.name}"
      all.each_with_index do |plant, index|
 def self.all_plants
exit
opened_url.css("b").text
opened_url.css("b")
opened_url.css("b").text
opened_url.css("p").text
opened_url.css("p")
exit
opened_url.css("h1").text
opened_url.css("h1")
opened_url
exit
opened_url
urls
opened_url.css("h1")
exit
opened_url.css("h1")
opened_url
exit
parsed_page.css("a").collect {|all| all.attribute("href").value}
parsed_page.css("a")
parsed_page
parsed_page.css
exit
all_plants
name = parsed_page.css("a").collect {|all| all.attribute("href").value }
exit
parsed_page.css("a").collect {|all| all.attribute("href").value }
parsed_page.css("a").text.map {|a| a.attribute('href').value}
parsed_page.css("a").text[1001]
parsed_page.css("a").text[1]
parsed_page.css("a").map {|all| all.text}
parsed_page.css("a").map {|all| all.text
parsed_page.css("a").first.text
exit
name =  parsed_page.css("a").first
parsed_page.css("div.liner").css("b").text.first.attr("href")
exit
parsed_page.css("div.liner").css("b").text
parsed_page.css("div.liner").css("b")text
parsed_page.css("span").text
parsed_page.css("p").text
parsed_page.css("b").text
exit
parsed_page.css("a").text.first
parsed_page.css("a").text
exit
name =  parsed_page.css("a").text.map {|a| a.attribute('src').value}
parsed_page.css("div.liner").collect { |a| a.tname =  parsed_page.css("a").text.map {|a| a.attribute('src').value}text }
parsed_page.css("div.liner").collect { |a| a.tname =  parsed_page.css("a").text.map {|a| a.attribute('src').value}ext }
parsed_page.css("div.liner").collect { |a| a.text }
name =  parsed_page.css("a").text.map {|a| a.attribute('href').value}
name =  parsed_page.css("a").text.collect {|a| a.attribute('href').value}
name =  parsed_page.css("a").text.each {|a| a.attribute('href').value}
name = parsed_page.css("a").text.map
name = parsed_page.css("a").map
name = parsed_page.css("a").text
name.count
name = parsed_page.css("a").text
name = parsed_page.css("h2").text
exit
name = parsed_page.css("h2").text
name = parsed_page.css("h2.calloutbox").text
PlantManager::Scraper.scraper
exit
scraper
exit
parsed_page
plant_names
plant_names.count
exit
